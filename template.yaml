AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  firebnb

  Sample SAM Template for firebnb
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Resources:
  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PropertiesTableGSI
      AttributeDefinitions:
        - AttributeName: propertyId
          AttributeType: S
        - AttributeName: sortKey
          AttributeType: S
        - AttributeName: country_city
          AttributeType: S
        - AttributeName: startBookingDate
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: propertyId
          KeyType: HASH
        - AttributeName: sortKey
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: Properties_GSI1
          KeySchema:
            - AttributeName: country_city
              KeyType: HASH
            - AttributeName: propertyId
              KeyType: RANGE
          Projection:
            NonKeyAttributes: [ownerId, title, description, city, country]
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: Properties_GSI2
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: startBookingDate
              KeyType: RANGE
          Projection:
            NonKeyAttributes: [propertyId, endBookingDate]
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1


  SearchPropertyByLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: app.searchByLocation
      Runtime: nodejs12.x 
      Policies:
        - DynamoIOCrudPolicy:
            TableName: PropertiesTableGSI
      Environment:
        Variables:
          TABLE_NAME: PropertiesTableGSI
          INDEX_NAME: Properties_GSI1
      Events:
        HelloApi:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Method: GET
            Path: /search
  
  GetAllPropertiesByOwner:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: app.getPropertiesByOwner
      Runtime: nodejs12.x
      Policies:
        - DynamoIOCrudPolicy:
            TableName: PropertiesTableGSI
      Environment:
        Variables:
          TABLE_NAME: PropertiesTableGSI
          INDEX_NAME: Properties_GSI3
      Events:
        HelloApi:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Method: GET
            Path: /properties
        
  AddNewProperty:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: app.addNewProperty
      Runtime: nodejs12.x
      Policies:
        - DynamoIOCrudPolicy:
            TableName: PropertiesTableGSI
      Environment:
        Variables:
          TABLE_NAME: PropertiesTableGSI
      Events:
        HelloApi:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Method: POST
            Path: /property
  
  BookProperty:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: app.bookProperty
      Runtime: nodejs12.x
      Policies:
        - DynamoIOCrudPolicy:
            TableName: PropertiesTableGSI
      Environment:
        Variables:
          TABLE_NAME: PropertiesTableGSI
      Events:
        HelloApi:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Method: POST
            Path: /book

  GetPropertyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: app.getProperty
      Runtime: nodejs12.x
      Policies:
        - DynamoIOCrudPolicy:
            TableName: PropertiesTableGSI
      Environment:
        Variables:
          TABLE_NAME: PropertiesTableGSI
      Events:
        HelloApi:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Method: GET
            Path: /property
  
  GetBookedDatesPropertyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: app.getBookedDatesProperty
      Runtime: nodejs12.x
      Policies:
        - DynamoIOCrudPolicy:
            TableName: PropertiesTableGSI
      Environment:
        Variables:
          TABLE_NAME: PropertiesTableGSI
      Events:
        HelloApi:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Method: GET
            Path: /propertyDates
  
  GetBookedPropertiesForUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: app.getBookedPropertiesForUsers
      Runtime: nodejs12.x
      Policies:
        - DynamoIOCrudPolicy:
            TableName: PropertiesTableGSI
      Environment:
        Variables:
          TABLE_NAME: PropertiesTableGSI
          INDEX_NAME: Properties_GSI2
      Events:
        HelloApi:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Method: GET
            Path: /propertyByUser

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
